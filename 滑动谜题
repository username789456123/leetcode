struct HashTable {
    char str[7];
    UT_hash_handle hh;
};

struct Node {
    char str[7];
    int val;
};

const int neighbors[6][3] = {{1, 3, -1}, {0, 2, 4}, {1, 5, -1}, {0, 4, -1}, {1, 3, 5}, {2, 4, -1}};

void swap(char* x, char* y) {
    char t = *x;
    *x = *y, *y = t;
}

// 枚举 status 通过一次旋转得到的数字
char** getNextStatus(char* status, int* retSize) {
    char** ret = malloc(sizeof(char*) * 3);
    *retSize = 0;
    int x = 0;
    while (status[x] != '0') {
        x++;
    }
    for (int i = 0; i < 3 && neighbors[x][i] != -1; i++) {
        int y = neighbors[x][i];
        swap(&status[x], &status[y]);
        ret[(*retSize)] = malloc(sizeof(char) * 7);
        strcpy(ret[(*retSize)++], status);
        swap(&status[x], &status[y]);
    }
    return ret;
}

int slidingPuzzle(int** board, int boardSize, int* boardColSize) {
    char str_0[] = "123450";
    char initial[7];
    for (int i = 0; i < 2; ++i) {
        for (int j = 0; j < 3; ++j) {
            initial[i * 3 + j] = (char)(board[i][j] + '0');
        }
    }
    initial[6] = '\0';
    if (strcmp(initial, str_0) == 0) {
        return 0;
    }

    struct Node q[10001];
    int left = 0, right = 0;
    strcpy(q[right].str, initial);
    q[right++].val = 0;

    struct HashTable* seen = NULL;
    struct HashTable* tmp = malloc(sizeof(struct HashTable));
    strcpy(tmp->str, initial);
    HASH_ADD(hh, seen, str, sizeof(char) * 7, tmp);

    while (left < right) {
        char* status = q[left].str;
        int step = q[left++].val;
        int nextStatusSize;
        char** nextStatus = getNextStatus(status, &nextStatusSize);
        for (int i = 0; i < nextStatusSize; i++) {
            HASH_FIND(hh, seen, nextStatus[i], sizeof(char) * 5, tmp);
            if (tmp == NULL) {
                if (strcmp(nextStatus[i], str_0) == 0) {
                    return step + 1;
                }
                strcpy(q[right].str, nextStatus[i]);
                q[right++].val = step + 1;
                tmp = malloc(sizeof(struct HashTable));
                strcpy(tmp->str, nextStatus[i]);
                HASH_ADD(hh, seen, str, sizeof(char) * 5, tmp);
            }
        }
    }

    return -1;
}
