int atMostNGivenDigitSet(char ** digits, int digitsSize, int n){
    int i=1,j=1,k=0,ret =0;
    int *a = malloc(sizeof(int)*digitsSize);
    int alen = 1;
    *(a+0) = *(*(digits+0)+0)-'0';
    while(j<digitsSize){
        if(*(*(digits+j)+0)!=*(*(digits+j-1)+0)){
            *(a+i) = *(*(digits+j)+0)-'0';
            i++;
        }
        j++;
    }
    alen = i;
    int nlen = 0,tmp =n;
    int *nwise = malloc(sizeof(int)*10);
    memset(nwise,0,sizeof(int)*10);
    while(tmp>0){
        *(nwise+nlen) = tmp%10;
        tmp /=10;
        nlen++;
    }

    int **dp = malloc(sizeof(int *)*(nlen+1));
    *(dp+0) = malloc(sizeof(int)*10);
    memset(*(dp+0),0,sizeof(int)*10);
    *(dp+1) = malloc(sizeof(int)*10);
    memset(*(dp+1),0,sizeof(int)*10);
    j=0;
    if(0==*(a+j)){
        *(*(dp+1)+0) = 1;
        j++;
    }
    if(1==*(a+j)){
        *(*(dp+1)+1) = *(*(dp+1)+0) + 1;
        j++;
    }
    for(i=2;i<10;i++){
        *(*(dp+1)+i) = *(*(dp+1)+i-1);
        if(j<alen&&i==*(a+j)){
            *(*(dp+1)+i) += 1;
            j++;
        }
    }
    int *seg = malloc(sizeof(int)*nlen);
    memset(seg,0,sizeof(int)*nlen);
    *(seg+0) = 0;
    for(i=2;i<=nlen;i++){
        *(dp+i) = malloc(sizeof(int)*10);
        memset(*(dp+i),0,sizeof(int)*10);
        
        *(seg+i-1) = *(*(dp+i-1)+9);
        if(9==*(a+alen-1)){
            *(seg+i-1) = *(seg+i-1)+*(seg+i-2);
        }
        j=0;
        if(0==*(a+j)){
            j++;
        }
        
        for(k=2;k<10;k++){
            *(*(dp+i)+k) = *(*(dp+i)+k-1);
            if(j<alen&&k-1==*(a+j)){
                *(*(dp+i)+k) += *(seg+i-1);
                j++;
            }
        }
    }
    i=nlen-1;
    while(i>=0){
        ret+=*(*(dp+i+1)+*(nwise+i));
        j=i-1;
        while(j>=0&&i==nlen-1){
            ret+=*(*(dp+j+1)+9);
            if(9==*(a+alen-1)){
                if(j>=1){
                    ret+=*(seg+j);
                }
            }
            j--;
        }
        j=0;
        while(j<alen){
            if(*(a+j)==*(nwise+i)){
                break;
            }
            j++;
        }
        if(j==alen){
            break;
        }
        i--;
    }
    return ret;
}
