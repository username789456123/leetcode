void dfs(int x, const int* quiet, const int** graph, const int* graphColSize, int* ans) {
    if (ans[x] != -1) {
        return;
    }
    ans[x] = x;
    for (int i = 0; i < graphColSize[x]; ++i) {
        int y = graph[x][i];
        dfs(y, quiet, graph, graphColSize, ans);
        if (quiet[ans[y]] < quiet[ans[x]]) {
            ans[x] = ans[y];
        }
    }
}

int* loudAndRich(int** richer, int richerSize, int* richerColSize, int* quiet, int quietSize, int* returnSize){
    int** graph = (int **)malloc(sizeof(int *) * quietSize);
    int* graphColSize = (int *)malloc(sizeof(int) * quietSize);
    int* ans = (int *)malloc(sizeof(int) * quietSize);

    for (int i = 0; i < quietSize; ++i) {
        graph[i] = (int *)malloc(sizeof(int) * quietSize);
        ans[i] = -1;
        graphColSize[i] = 0; 
    }
    for (int i = 0; i < richerSize; ++i) {
        int x = richer[i][0];
        int y = richer[i][1];
        graph[y][graphColSize[y]] = x;
        graphColSize[y]++;
    }
    for (int i = 0; i < quietSize; ++i) {
        dfs(i, quiet, graph, graphColSize, ans);
    }
    for (int i = 0; i < quietSize; ++i) {
        free(graph[i]);
    }
    free(graphColSize);
    *returnSize = quietSize;
    return ans;
}
