#define N 3010 
#define M 20010
#define INF 0x3f3f3f3f

int d[N];
int h[N], w[M], e[M], ne[M], idx;
int heap[N], ph[N], hp[N], size;
int n;

void init()
{
    memset(h, -1, sizeof h);
    memset(ph, -1, sizeof ph);
    size = 0;
    idx = 0;
}

void add(int a, int b, int c)
{
    e[idx] = b, ne[idx] = h[a], w[idx] = c, h[a] = idx ++;
}

void swap(int *a, int *b)
{
    int t = *a;
    *a = *b;
    *b = t;
}

void heap_swap(int u, int t)
{
    swap(&heap[u], &heap[t]);
    swap(&ph[hp[u]], &ph[hp[t]]);
    swap(&hp[u], &hp[t]);
}

void down(int u)
{
    int t = u;
    if (u * 2 <= size && heap[u * 2] < heap[t]) t = u * 2;
    if (u * 2 + 1 <= size && heap[u * 2 + 1] < heap[t]) t = u * 2 + 1;
    if (u != t)
    {
        heap_swap(u, t);
        down(t);
    }
}

void up(int u)
{
    while (u / 2 && heap[u / 2] > heap[u])
    {
        heap_swap(u / 2, u);
        u >>= 1;
    }
}

void dijkstra()
{
    memset(d, 0x3f, sizeof d);
    
    heap[++ size] = d[0] = 0;
    ph[0] = size, hp[size] = 0;
    
    while (size)
    {
        int t = heap[1];
        int v = hp[1];
        heap_swap(1, size --);
        down(1);
        
        for (int i = h[v]; i != -1; i = ne[i])
        {
            int j = e[i];
            if (d[j] > t + w[i])
            {
                d[j] = t + w[i];
                if (ph[j] != -1)
                {
                    int k = ph[j];
                    heap[k] = d[j];
                    up(k);
                    down(k);
                }
                else
                {
                    heap[++ size] = d[j];
                    ph[j] = size, hp[size] = j;
                    up(size);
                }
            }
        }
    }
}

int reachableNodes(int** e, int eSize, int* eColSize, int maxMoves, int nn){
    init();
    n = nn;
    // 建圖
    for (int i = 0; i < eSize; i ++)
    {
        int a = e[i][0], b = e[i][1], c = e[i][2];
        add(a, b, c + 1), add(b, a, c + 1);
    }
    
    dijkstra();
    
    int res = 0;
    for (int i = 0; i < n; i ++)
        if (d[i] <= maxMoves)
            res ++;
    
    for (int i = 0; i < eSize; i ++) 
    {
        int a = e[i][0], b = e[i][1], c = e[i][2];
        int x = fmax(0, maxMoves - d[a]), y = fmax(0, maxMoves - d[b]);
        res += fmin(x + y, c);
    }
    return res;
}
