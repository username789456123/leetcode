int minFallingPathSum(int** grid, int gridSize, int* gridColSize){
    int n = gridSize;
    if(n == 1){
        return grid[0][0];
    }
    int** dp = (int**)calloc(n, sizeof(int*));
    for(int i = 0; i < n; i++){
        dp[i] = (int*)calloc(n, sizeof(int));
        dp[0][i] = grid[0][i];
    }
    //从第二行开始，每行寻找最小值和次小值，并获取索引。如果下一行的索引不等于最小值的索引，那么加上最小值；否则加上次小值
    for(int i = 1; i < n; i++){
        int min = INT_MAX;
        int next = INT_MAX;
        int idx_min = -1;
        int idx_next = -1;
        //寻找最小值
        for(int j = 0; j < n; j++){
            if(dp[i - 1][j] < min){
                min = dp[i - 1][j];
                idx_min = j;
            }
        }
        //寻找次小值
        for(int j = 0; j < n; j++){
            if(dp[i - 1][j] < next && j != idx_min){
                next = dp[i - 1][j];
                idx_next = j;
            }
        }
        //此时第i - 1行的min和next及其索引已经得到，现可对dp[i]进行赋值
        for(int j = 0; j < n; j++){
            if(j != idx_min){
                dp[i][j] = grid[i][j] + min;
            }
            else{
                dp[i][j] = grid[i][j] + next;
            }
        }
    }
    int ans = INT_MAX;
    for(int j = 0; j < n; j++){
        ans = ans < dp[n - 1][j] ? ans : dp[n - 1][j];
    }

    return ans;
}
