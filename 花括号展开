#define SIZE 62

typedef struct {
    char str[62];
    UT_hash_handle hh;
} HashNode;

HashNode *g_hashMap = NULL;

void hashAdd(HashNode **map, char *name)
{
    HashNode *node = NULL;
    HASH_FIND_STR(*map, name, node);
    if (node == NULL) {
        node = (HashNode *)malloc(sizeof(HashNode));
        strcpy(node->str, name);
        HASH_ADD_STR(*map, str, node);
        return;
    }
    strcpy(node->str, name);
}

HashNode *hashFind(HashNode *map, char *name)
{
    HashNode *node = NULL;
    HASH_FIND_STR(map, name, node);
    return node;
}

static inline int IsExistLeftBacket(char* expression)
{
    while (*expression) {
        if (*expression == '{') {
            return true;
        }
        ++expression;
    }
    return false;
}

static inline int Split(char* str, char* splitStr, char (*ret)[SIZE])
{
    char *q = strtok(str, splitStr);
    int count = 0;
    while(q) {
        strcpy(ret[count], q);
        ++count;
        q = strtok(NULL, ","); 
    }
    return count;
}

void Dfs(char* expression)
{
    if (expression == NULL) {
        return ;
    }
    if (!IsExistLeftBacket(expression)) {
        char split[SIZE][SIZE] = {0};
        int strCnt = Split(expression, ",", split);
        for (int i = 0; i < strCnt; i++) {
            hashAdd(&g_hashMap, split[i]);
        }
        return;
    }

    char leftCash[SIZE] = {0};
    char rightCash[SIZE] = {0};
    char middleCash[SIZE] = {0};

    int left, right, i;
    int len = strlen(expression);

    for (i = 0; i < len && expression[i] != '}'; ++i) {
        if (expression[i] == '{') {
            left = i;
        }
    }
    right = i;
    strncpy(leftCash, expression, left);
    leftCash[left] = '\0';
    strcpy(rightCash, expression + right + 1);
    strncpy(middleCash, expression + left + 1, right - left - 1);
    middleCash[right - left - 1] = '\0';

    char split[SIZE][SIZE];
    int splitCount = Split(middleCash, ",", split);
    for (i = 0; i < splitCount; ++i) {
        char cache[SIZE];
        memset(cache, 0, sizeof(cache));
        strcpy(cache, leftCash);
        strcat(cache, split[i]);
        strcat(cache, rightCash);
        Dfs(cache);
    }

}

int Cmp(const HashNode *a, const HashNode *b)
{
    return strcmp(a->str, b->str);
}

char ** braceExpansionII(char * expression, int* returnSize)
{
    if (expression == NULL) {
        *returnSize = 0;
        return NULL;
    }
    g_hashMap = NULL;

    Dfs(expression);

    *returnSize = HASH_COUNT(g_hashMap);
    HASH_SORT(g_hashMap, Cmp);

    char** ret = (char**)malloc(sizeof(char*) * (*returnSize));
    HashNode *tmp = NULL;
    int index = 0;
    for (tmp = g_hashMap; tmp != NULL; tmp = tmp->hh.next) {
        ret[index] = (char*)malloc(sizeof(char) * SIZE);
        strcpy(ret[index], tmp->str);
        index++;
    }
    
    return ret;
}
