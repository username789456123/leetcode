struct Node {
    int id, mask, dist;
};

int shortestPathLength(int** graph, int graphSize, int* graphColSize){
    int n = graphSize;
    struct Node q[n * (1 << n)];
    int left = 0, right = 0;
    int seen[n][1 << n];
    memset(seen, 0, sizeof(seen));
    for (int i = 0; i < n; ++i) {
        q[right++] = (struct Node){i, 1 << i, 0};
        seen[i][1 << i] = true;
    }

    int ans = 0;
    while (left < right) {
        int u = q[left].id;
        int mask = q[left].mask;
        int dist = q[left++].dist;
        if (mask == (1 << n) - 1) {
            ans = dist;
            break;
        }
        // 搜索相邻的节点
        for (int i = 0; i < graphColSize[u]; i++) {
            int v = graph[u][i];
            // 将 mask 的第 v 位置为 1
            int mask_v = mask | (1 << v);
            if (!seen[v][mask_v]) {
                q[right++] = (struct Node){v, mask_v, dist + 1};
                seen[v][mask_v] = true;
            }
        }
    }
    return ans;
}
