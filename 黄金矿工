void dfs(int** grid, int m, int n, int x, int y, int total, int *max) {
    if ((x < 0) || (x > (m - 1)) || (y < 0) || (y > (n - 1))) {
        return;
    }
    if (!grid[x][y]) {
        return;
    }

    total += grid[x][y];
    
    if (total >= *max) {
        *max = total;
    }

    int tmp = grid[x][y];
    grid[x][y] = 0;
    dfs(grid, m, n, x + 1, y, total, max);
    dfs(grid, m, n, x - 1, y, total, max);
    dfs(grid, m, n, x, y + 1, total, max);
    dfs(grid, m, n, x, y - 1, total, max);
    grid[x][y] = tmp;
    return;
}

int getMaximumGold(int** grid, int gridSize, int* gridColSize){
    int m = gridSize;
    int n = gridColSize[0];

    int max = 0;
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            dfs(grid, m, n, i, j, 0, &max);
        }
    }

    return max;
}
