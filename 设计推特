#define MAX_SIZE 512

struct User {
  int id;                  //用户id
  int followee[MAX_SIZE];  //基于数组的散列：下标为关注的用户id，元素值（1为关注，0为未关注）
  struct User* next;
};

struct Tweet {
  int userId;   //用户id
  int tweetId;  //推特id
  struct Tweet* next;
};

typedef struct {
  struct User* user;
  struct Tweet* tweet;
} Twitter;

/** Initialize your data structure here. */
Twitter* twitterCreate() {
  Twitter* twitter = (Twitter*)malloc(sizeof(Twitter));
  twitter->user = (struct User*)malloc(sizeof(struct User));
  twitter->user->next = NULL;
  twitter->tweet = (struct Tweet*)malloc(sizeof(struct Tweet));
  twitter->tweet->next = NULL;
  return twitter;
}

/** Compose a new tweet. */
void twitterPostTweet(Twitter* obj, int userId, int tweetId) {
  struct Tweet* tweet = (struct Tweet*)malloc(sizeof(struct Tweet));
  tweet->userId = userId;
  tweet->tweetId = tweetId;
  tweet->next = obj->tweet->next;  //头插法,保证最后发布的推文在最前面
  obj->tweet->next = tweet;
}

/** Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */
int* twitterGetNewsFeed(Twitter* obj, int userId, int* retSize) {
  int* ret = (int*)calloc(10, sizeof(int));
  *retSize = 0;
  struct Tweet* tweet = obj->tweet->next;
  struct User* user = obj->user->next;
  while (user && user->id != userId) user = user->next;  //查找用户结点
  if (user == NULL) {                                    //未找到，当前用户未关注任何用户
    while (tweet && *retSize < 10) {
      if (tweet->userId == userId)  //用户自己发的推文
        ret[(*retSize)++] = tweet->tweetId;
      tweet = tweet->next;
    }
    return ret;
  }
  while (tweet && *retSize < 10) {
    if (tweet->userId == userId || user->followee[tweet->userId] == 1)  //用户自己及用户关注的人的推文
      ret[(*retSize)++] = tweet->tweetId;
    tweet = tweet->next;
  }
  return ret;
}

/** Follower follows a followee. If the operation is invalid, it should be a no-op. */
void twitterFollow(Twitter* obj, int followerId, int followeeId) {
  struct User* u = obj->user;
  while (u->next && u->id != followerId) u = u->next;  //用户链表中是否存在当前用户
  if (u->id == followerId)                             //存在：将关注的用户id散列到数组中，关注(1)
    u->followee[followeeId] = 1;
  else {  //不存在：新建用户结点，关注(1)，头插法插入用户链表
    struct User* user = (struct User*)malloc(sizeof(struct User));
    user->id = followerId;
    user->followee[followeeId] = 1;
    user->next = obj->user->next;
    obj->user->next = user;
  }
}

/** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */
void twitterUnfollow(Twitter* obj, int followerId, int followeeId) {
  struct User* u = obj->user;
  while (u->next && u->id != followerId) u = u->next;  //用户链表中是否存在当前用户
  if (u->id == followerId)                             //存在：取消关注(0)
    u->followee[followeeId] = 0;
}

void twitterFree(Twitter* obj) {
  if (obj && obj->user) free(obj->user);
  if (obj && obj->tweet) free(obj->tweet);
  if (obj) free(obj);
}
