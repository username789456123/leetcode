int find(int* f, int x) {
    if (f[x] == x) {
        return x;
    }
    int newf = find(f, f[x]);
    f[x] = newf;
    return f[x];
}

void merge(int* f, int* sz, int x, int y) {
    int fx = find(f, x), fy = find(f, y);
    if (fx == fy) {
        return;
    }
    f[fx] = fy;
    sz[fy] += sz[fx];
}

int size(int* f, int* sz, int x) {
    return sz[find(f, x)];
}

int* hitBricks(int** grid, int gridSize, int* gridColSize, int** hits, int hitsSize, int* hitsColSize, int* returnSize) {
    int h = gridSize, w = gridColSize[0];

    int f[h * w + 1], sz[h * w + 1];
    for (int i = 0; i <= h * w; i++) {
        f[i] = i;
        sz[i] = 1;
    }
    int status[h][w];
    for (int i = 0; i < h; i++) {
        for (int j = 0; j < w; j++) {
            status[i][j] = grid[i][j];
        }
    }
    for (int i = 0; i < hitsSize; i++) {
        status[hits[i][0]][hits[i][1]] = 0;
    }
    for (int i = 0; i < h; i++) {
        for (int j = 0; j < w; j++) {
            if (status[i][j] == 1) {
                if (i == 0) {
                    merge(f, sz, h * w, i * w + j);
                }
                if (i > 0 && status[i - 1][j] == 1) {
                    merge(f, sz, i * w + j, (i - 1) * w + j);
                }
                if (j > 0 && status[i][j - 1] == 1) {
                    merge(f, sz, i * w + j, i * w + j - 1);
                }
            }
        }
    }
    int directions[4][2] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
    int* ret = malloc(sizeof(int) * hitsSize);
    memset(ret, 0, sizeof(int) * hitsSize);
    *returnSize = hitsSize;
    memset(ret, 0, hitsSize);
    for (int i = hitsSize - 1; i >= 0; i--) {
        int r = hits[i][0], c = hits[i][1];
        if (grid[r][c] == 0) {
            continue;
        }
        int prev = size(f, sz, h * w);

        if (r == 0) {
            merge(f, sz, c, h * w);
        }
        for (int i = 0; i < 4; i++) {
            int nr = r + directions[i][0], nc = c + directions[i][1];

            if (nr >= 0 && nr < h && nc >= 0 && nc < w) {
                if (status[nr][nc] == 1) {
                    merge(f, sz, r * w + c, nr * w + nc);
                }
            }
        }
        ret[i] = fmax(0, size(f, sz, h * w) - prev - 1);
        status[r][c] = 1;
    }
    return ret;
}
