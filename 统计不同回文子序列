#define MOD 1000000007

int countPalindromicSubsequences(char * s){
    int n = strlen(s);
    int **dp[4];
    for (int i = 0; i < 4; i++) {
        dp[i] = (int **)malloc(sizeof(int *) * n);
        for (int j = 0; j < n; j++) {
            dp[i][j] = (int *)malloc(sizeof(int) * n);
            memset(dp[i][j], 0, sizeof(int) * n);
        }
    }
    for (int i = 0; i < n; i++) {
        dp[s[i] - 'a'][i][i] = 1;
    }

    for (int len = 2; len <= n; len++) {
        for (int i = 0; i + len <= n; i++) {
            int j = i + len - 1;
            for (char c = 'a', k = 0; c <= 'd'; c++, k++) {
                if (s[i] == c && s[j] == c) {
                    dp[k][i][j] = (2LL + dp[0][i + 1][j - 1] + dp[1][i + 1][j - 1] + dp[2][i + 1][j - 1] + dp[3][i + 1][j - 1]) % MOD;
                } else if (s[i] == c) {
                    dp[k][i][j] = dp[k][i][j - 1];
                } else if (s[j] == c) {
                    dp[k][i][j] = dp[k][i + 1][j];
                } else {
                    dp[k][i][j] = dp[k][i + 1][j - 1];
                }
            }
        }
    }

    int res = 0;
    for (int i = 0; i < 4; i++) {
        res = (res + dp[i][0][n - 1]) % MOD;
        for (int j = 0; j < n; ++j) {
            free(dp[i][j]);
        }
        free(dp[i]);
    }
    return res;
}
