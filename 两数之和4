typedef struct {
    int key;
    UT_hash_handle hh;
} HashItem;

bool helper(const struct TreeNode* root, int k, HashItem ** hashTable) {
    if (root == NULL) {
        return false;
    }
    int key = k - root->val;
    HashItem * pEntry = NULL;
    HASH_FIND_INT(*hashTable, &key, pEntry);
    if (pEntry != NULL) {
        return true;
    }
    pEntry = (HashItem *)malloc(sizeof(HashItem));
    pEntry->key = root->val;
    HASH_ADD_INT(*hashTable, key, pEntry);
    return helper(root->left, k, hashTable) || helper(root->right, k, hashTable);
}

bool findTarget(struct TreeNode* root, int k){
    HashItem * hashTable = NULL;
    return helper(root, k, &hashTable);
}
