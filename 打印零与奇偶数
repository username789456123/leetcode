typedef struct {
    int n;
    pthread_mutex_t lock0;
    pthread_mutex_t lock1;
    pthread_mutex_t lock2;
    bool flag;
} ZeroEvenOdd;

ZeroEvenOdd* zeroEvenOddCreate(int n) {
    ZeroEvenOdd* obj = (ZeroEvenOdd*) malloc(sizeof(ZeroEvenOdd));

    obj->n = n;
    obj->flag = true;
    pthread_mutex_init(&obj->lock0, NULL);
    pthread_mutex_init(&obj->lock1, NULL);
    pthread_mutex_init(&obj->lock2, NULL);

    pthread_mutex_lock(&obj->lock1);
    pthread_mutex_lock(&obj->lock2);
    return obj;
}

// You may call global function `void printNumber(int x)`
// to output "x", where x is an integer.

void zero(ZeroEvenOdd* obj) {
    int i;
    int n = obj->n;
    for (i = 1; i <= n; i++) {
        pthread_mutex_lock(&obj->lock0);
        printNumber(0);
        if (obj->flag) {
            pthread_mutex_unlock(&obj->lock1);  
        } else {
            pthread_mutex_unlock(&obj->lock2);
        }
        obj->flag = !obj->flag;
    }
    
}

void odd(ZeroEvenOdd* obj) {
    int i;
    int n = obj->n;
    for (i = 1; i <= n; i+=2) {
        pthread_mutex_lock(&obj->lock1);
        printNumber(i);
        pthread_mutex_unlock(&obj->lock0);
    }
    
}

void even(ZeroEvenOdd* obj) {
    int i;
    int n = obj->n;
    for (i = 2; i <= n; i+=2) {
        pthread_mutex_lock(&obj->lock2);
        printNumber(i);
        pthread_mutex_unlock(&obj->lock0);
    }
}

void zeroEvenOddFree(ZeroEvenOdd* obj) {
    pthread_mutex_destroy(&obj->lock0);
    pthread_mutex_destroy(&obj->lock1);
    pthread_mutex_destroy(&obj->lock2);
    free(obj);
}
