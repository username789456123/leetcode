struct node{
    int route[12],len; //route用于存储路径
};
char * shortestSuperstring(char ** words, int wordsSize){
    int n=wordsSize;
    struct node dp[1<<n][n];
    //初始化
    for(int i=0;i<(1<<n);++i){
        for(int j=0;j<n;++j){
            dp[i][j].len=0;
            for(int k=0;k<n;++k)dp[i][j].route[k]=-1;
        }
    }
    //common：words[i]和words[j]最长公共后前缀长度
    int common[n][n];
    for(int i=0;i<n;++i){
        for(int j=0;j<n;++j){
            if(i!=j){
                int len1=strlen(words[i]);
                int len2=strlen(words[j]);
                int minlen=len1<len2?len1:len2;
                //任何一个不是另一个的子字符串，最大公共长度为minlen-1
                for(int k=minlen-1;k>=0;k--){ 
                    int flag=1;
                    for(int l=0;l<k;++l){
                        if(words[j][l]!=words[i][len1-k+l]){flag=0;break;}
                    }
                    if(flag){common[i][j]=k;break;}
                }
            }
        }
    }
    for(int i=0;i<n;++i){
        dp[1<<i][i].route[0]=i;
        dp[1<<i][i].len=strlen(words[i]);
    }
    for(int mask=1;mask<(1<<n);++mask){
        for(int i=0;i<n;++i){
            if(!(mask==(1<<i))&&(mask&(1<<i))){
                //比较那个前驱状态更短
                int premask=mask^(1<<i);
                int minindex=-1,minlen=INT_MAX;
                for(int j=0;j<n;++j){
                    if((premask&(1<<j))){   //dp[premask][j]合理
                        int templen=dp[premask][j].len+strlen(words[i])-common[j][i];
                        if(templen<minlen)minindex=j,minlen=templen;
                    }
                }
                dp[mask][i].len=minlen;
                //记录路径
                int now=0;
                while(dp[premask][minindex].route[now+1]!=-1)now++;
                for(int j=0;j<=now;++j)dp[mask][i].route[j]=dp[premask][minindex].route[j];
                dp[mask][i].route[now+1]=i;
            }
        }
    }
    int minindex=-1,minlen=INT_MAX;
    for(int i=0;i<n;++i){
        if(minlen>dp[(1<<n)-1][i].len)minindex=i,minlen=dp[(1<<n)-1][i].len;
    }
    //for(int i=0;i<n;++i)printf("%d ",dp[(1<<n)-1][minindex].route[i]);
    //output
    char *ret=malloc(sizeof(char)*245);
    int len0=strlen(words[dp[(1<<n)-1][minindex].route[0]]);
    int now=0;
    while(now<len0)ret[now]=words[dp[(1<<n)-1][minindex].route[0]][now],now++;
    for(int i=1;i<n;++i){
        len0=strlen(words[dp[(1<<n)-1][minindex].route[i]]);
        for(int j=common[dp[(1<<n)-1][minindex].route[i-1]][dp[(1<<n)-1][minindex].route[i]];j<len0;++j)
        ret[now++]=words[dp[(1<<n)-1][minindex].route[i]][j];
    }
    ret[now++]='\0';
    return ret;
}
