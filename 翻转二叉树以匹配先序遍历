/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */


/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int idx;
int flag;

void dfs(struct TreeNode *root, int *voyage, int *ans, int* returnSize)
{

    if (root == NULL || flag == 1) {
        return;
    }

    if (root->val == voyage[idx]) {
        if (root->left != NULL && root->right != NULL) {
        
            if (root->left->val != voyage[idx + 1]) {
                ans[(*returnSize)++] = root->val;
                struct TreeNode *tmp = root->left;
                root->left = root->right;
                root->right = tmp;
            }
        }
    } else {
        (*returnSize) = 1;
        ans[0] = -1;
        flag = 1;
        return;
    }

    idx++;
    dfs(root->left, voyage, ans, returnSize);
    dfs(root->right, voyage, ans, returnSize);
}

int* flipMatchVoyage(struct TreeNode* root, int* voyage, int voyageSize, int* returnSize){
    int *ans = malloc(sizeof(int) * 100);
    (*returnSize) = NULL;
    idx = 0;
    flag = 0;

    dfs(root, voyage, ans, returnSize);
    
    return ans;
}
