typedef struct {
    int q[2002];
    int head;
    int tail;
    int k;
} MyCircularDeque;


MyCircularDeque* myCircularDequeCreate(int k) {
    MyCircularDeque *head = malloc(sizeof(MyCircularDeque));

    head->k = k;
    head->head = 1000;
    head->tail = 1001;
    return head;
}

bool myCircularDequeInsertFront(MyCircularDeque* obj, int value) {
    if (obj->tail - obj->head > obj->k) {
        return false;
    }

    obj->q[obj->head--] = value;

    return true;
}

bool myCircularDequeInsertLast(MyCircularDeque* obj, int value) {
    if (obj->tail - obj->head > obj->k) {
        return false;
    }

    obj->q[obj->tail++] = value;

    return true;
}

bool myCircularDequeDeleteFront(MyCircularDeque* obj) {
    if (obj->tail - obj->head <= 1)
        return false;

    obj->head++;

    return true;
}

bool myCircularDequeDeleteLast(MyCircularDeque* obj) {
    if (obj->tail - obj->head <= 1)
        return false;

    obj->tail--;

    return true;
}

int myCircularDequeGetFront(MyCircularDeque* obj) {
    if (obj->tail - obj->head <= 1)
        return -1;
    
    return obj->q[obj->head + 1];
}

int myCircularDequeGetRear(MyCircularDeque* obj) {
    if (obj->tail - obj->head <= 1)
        return -1;
    
    return  obj->q[obj->tail - 1];
}

bool myCircularDequeIsEmpty(MyCircularDeque* obj) {
    if (obj->tail - obj->head <= 1)
        return true;

    return false;
}

bool myCircularDequeIsFull(MyCircularDeque* obj) {
    if (obj->tail - obj->head > obj->k) {
        return true;
    }

    return false;
}

void myCircularDequeFree(MyCircularDeque* obj) {
    free(obj);
}

/**
 * Your MyCircularDeque struct will be instantiated and called as such:
 * MyCircularDeque* obj = myCircularDequeCreate(k);
 * bool param_1 = myCircularDequeInsertFront(obj, value);
 
 * bool param_2 = myCircularDequeInsertLast(obj, value);
 
 * bool param_3 = myCircularDequeDeleteFront(obj);
 
 * bool param_4 = myCircularDequeDeleteLast(obj);
 
 * int param_5 = myCircularDequeGetFront(obj);
 
 * int param_6 = myCircularDequeGetRear(obj);
 
 * bool param_7 = myCircularDequeIsEmpty(obj);
 
 * bool param_8 = myCircularDequeIsFull(obj);
 
 * myCircularDequeFree(obj);
*/
