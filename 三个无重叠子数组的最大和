int* maxSumOfThreeSubarrays(int* nums, int numsSize, int k, int* returnSize)
{
    int len = numsSize-k+1;
    int sumPerK[len];
    memset(sumPerK,0,sizeof(sumPerK));
    int sumTmp = 0;
    for(int i = 0;i < k;i++)
    {
        sumTmp += nums[i];
    }
    sumPerK[0] = sumTmp;
    for(int i = 1;i < len;i++)
    {
        sumTmp = sumTmp-nums[i-1]+nums[i+k-1];
        sumPerK[i] = sumTmp;
    }
    int *ret = malloc(sizeof(int)*3);
    memset(ret,0,sizeof(int)*3);
    *returnSize = 3;
    int dp[len][3]; 
    memset(dp,0,sizeof(dp));
    dp[0][0] = sumPerK[0];
    for(int i = 1;i < len;i++)
    {
        for(int j = 0;j < 3;j++)
        {
            if(j == 0){
                dp[i][j] = fmax(sumPerK[i],dp[i-1][j]);
            }else if(i+1 <= j*k){
                dp[i][j] = 0;
            }else{
                dp[i][j] = fmax(sumPerK[i]+dp[i-k][j-1],dp[i-1][j]);
            }
        }
    }
    int tmp = dp[len-1][2];
    for(int i = 2;i >= 0;i--){
        for(int j = 0;j < len;j++){
            if(dp[j][i] == tmp){
                ret[i] = j;
                tmp = dp[j][i] - sumPerK[ret[i]];
                break;
            }
        }
    }
    return ret;
}
