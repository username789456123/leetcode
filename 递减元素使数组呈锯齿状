int DecreaseOps(int *nums, int numsSize, int idx)
{
    /* Make nums[idx] < a[i-1]/a[i+1] */
    int smallNum;

    if (idx == 0) {
        smallNum = nums[idx + 1];
    } else if (idx == numsSize - 1) {
        smallNum = nums[idx - 1];
    } else {
        smallNum = (nums[idx - 1] < nums[idx + 1]) ? nums[idx - 1] : nums[idx + 1];
    }

    if (nums[idx] >= smallNum) {
        return nums[idx] - smallNum + 1;
    }

    return 0;
}

int GetZigzagNum(int *nums, int numsSize, int startPos)
{
    /*  odd:  a0 < a1 > a2
        even: a0 > a1 < a2
    */
    int i;
    int opsNum = 0;

    for (i = startPos; i < numsSize; i += 2) {
        opsNum += DecreaseOps(nums, numsSize, i);
    }

    return opsNum;
}

int movesToMakeZigzag(int *nums, int numsSize)
{
    int minNumOdd;
    int minNumEven;

    if (numsSize <= 2) {
        return 0;
    }

    minNumOdd = GetZigzagNum(nums, numsSize, 0);
    minNumEven = GetZigzagNum(nums, numsSize, 1);
    
    return (minNumOdd < minNumEven) ? minNumOdd : minNumEven;
}
