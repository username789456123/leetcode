#define MAX_LEN 1000
#define MAX_ELEM_LEN 150

/* middle 是 逗号的位置，注意前后有括号.  left  right里面不再存括号 */
void GetHalfRes(char *S, int middle, char *leftStr, char *rightStr)
{
    int i;

    for (i = 1; i < middle; i++) {
        leftStr[i - 1] = S[i];
    }
    leftStr[i - 1] = '\0';

    strcpy(rightStr, S + middle);
    rightStr[strlen(S) - middle - 1] = '\0';
    printf("=GetHalfRes==S = %s  leftStr =  %s, rightStr = %s, middle = %d \n", S, leftStr, rightStr, middle);
}

/* pose , */
void addPoint(char * source, char *str, int pose, int len)
{
    int i;

    strcpy(str, source);
    str[len + 1] = '\0';

    for (i = len; i > pose; i--) {
        str[i] = str[i - 1];
    }
    str[i] = '.';
}

void GetValidStrs(char *halfStr, char resHalfStr[MAX_ELEM_LEN][MAX_ELEM_LEN], int *resHalfLen)
{
    int strLen = strlen(halfStr);
    int i;
    int countZero;
    *resHalfLen = 0;

    /* 整数不合格的话，还是要继续计算小数 */
    if (strLen > 1 && halfStr[0] == '0') {
        printf("invalid int \n");
    } else if (strLen == 1) {
        strcpy(resHalfStr[*resHalfLen], halfStr);
        (*resHalfLen)++;
        return;
    } else {
        strcpy(resHalfStr[*resHalfLen], halfStr);
        (*resHalfLen)++;
    }

    /* point */
    /* 0.9900 */
    if (halfStr[strLen - 1] == '0') {
        return;
    } 

    // 前面有0  00.07  01.22  \\  1.234
    for (i = 1; i < strLen; i++) {
        addPoint(halfStr, resHalfStr[*resHalfLen], i, strLen);
        (*resHalfLen)++;

        if (halfStr[0] == '0') {
            return;
        }
    }
    return;
}

void setResult(char **result, int *resultSize, char resLeftStr[MAX_ELEM_LEN][MAX_ELEM_LEN], int resLeftLen, 
    char resRightStr[MAX_ELEM_LEN][MAX_ELEM_LEN], int resRightLen)
{
    int i;
    int j;

    for (i = 0; i < resLeftLen; i++) {
        for (j = 0; j < resRightLen; j++) {
            result[*resultSize] = malloc(sizeof(char) * MAX_ELEM_LEN);

            strcpy(result[*resultSize], "(");
            strcat(result[*resultSize], resLeftStr[i]);
            /* 两个数字中间（逗号之后）都有一个空格 */
            strcat(result[*resultSize], ", ");
            strcat(result[*resultSize], resRightStr[j]);
            strcat(result[*resultSize], ")");

            printf("result[%d] = %s \n", *resultSize, result[*resultSize]);
            (*resultSize)++;
        }
    }
}

char ** ambiguousCoordinates(char * S, int* returnSize) {
    char **result = malloc(sizeof(char*) * MAX_LEN);
    int i;
    int sLen = strlen(S);
    char leftStr[sLen];
    char rightStr[sLen];
    char resLeftStr[MAX_ELEM_LEN][MAX_ELEM_LEN];
    int resLeftLen;
    char resRightStr[MAX_ELEM_LEN][MAX_ELEM_LEN];
    int resRightLen;

    *returnSize = 0;

    for (i = 2; i < sLen - 1; i++) {
        GetHalfRes(S, i, leftStr, rightStr);
        GetValidStrs(leftStr, resLeftStr, &resLeftLen);
        GetValidStrs(rightStr, resRightStr, &resRightLen);
        
        setResult(result, returnSize, resLeftStr, resLeftLen, resRightStr, resRightLen);
    }

    return result;
}
