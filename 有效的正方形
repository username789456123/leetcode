static inline bool isSamePoint(const int *v1, const int *v2) {
    return (v1[0] == v2[0]) && (v1[1] == v2[1]);
}

static inline bool checkLength(const int *v1, const int *v2) {
    return (v1[0] * v1[0] + v1[1] * v1[1]) == (v2[0] * v2[0] + v2[1] * v2[1]);
}

static inline bool checkMidPoint(const int* p1, const int* p2, const int* p3, const int* p4) {
    return (p1[0] + p2[0]) == (p3[0] + p4[0]) && (p1[1] + p2[1]) == (p3[1] + p4[1]);
}

static inline int calCos(const int *v1, const int *v2) {
    return (v1[0] * v2[0] + v1[1] * v2[1]) == 0;
}

bool help(const int* p1, const int* p2, const int* p3, const int* p4) {
    int v1[2] = {p1[0] - p2[0], p1[1] - p2[1]};
    int v2[2] = {p3[0] - p4[0], p3[1] - p4[1]};
    if (checkMidPoint(p1, p2, p3, p4) && checkLength(v1, v2) && calCos(v1, v2)) {
        return true;
    } 
    return false;
}
bool validSquare(int* p1, int p1Size, int* p2, int p2Size, int* p3, int p3Size, int* p4, int p4Size) {
    if (isSamePoint(p1, p2) || isSamePoint(p1, p3) || isSamePoint(p1, p4)) {
        return false;
    }
    if (help(p1, p2, p3, p4) || help(p1, p3, p2, p4) || help(p1, p4, p2, p3)) {
        return true;
    }
    return false;
}
