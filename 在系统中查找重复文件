struct hash_node {
    char key[1000];
    char **path;
    int pathNum;
    UT_hash_handle hh;
};
struct hash_node *g_hash = NULL;
void addNode(char *key, char *path)
{
    struct hash_node *s = NULL;
    HASH_FIND_STR(g_hash, key, s);
    if (s == NULL) {
        s = malloc(sizeof(struct hash_node));
        strcpy(s->key, key);
        s->path = malloc(sizeof(char *) * 10000);
        s->pathNum = 1;
        s->path[s->pathNum - 1] = malloc(sizeof(char) * 1000);
        strcpy(s->path[s->pathNum - 1], path);
        HASH_ADD_STR(g_hash, key, s);
    } else {
        s->pathNum += 1;
        s->path[s->pathNum - 1] = malloc(sizeof(char) * 1000);
        strcpy(s->path[s->pathNum - 1], path);
    }
    return;
}
void deleteAll()
{
    struct hash_node *cur, *tmp;
    HASH_ITER(hh, g_hash, cur, tmp) {
        HASH_DEL(g_hash, cur);
        free(cur);
    }
    return;
}
char *getRootPath(char *path)
{
    char *ret = malloc(sizeof(char) * 1000);
    for (int i = 0; i < strlen(path); i++) {
        if (path[i] != ' ') {
            ret[i] = path[i];
        } else {
            ret[i] = '\0';
            break;
        }
    }
    return ret;
}
char **getFileContent(char *path, int *size)
{
    char **retArr = malloc(sizeof(char *) * 1000);
    (*size) = 0;
    char *p = path;
    while ((*p) != ' ') {
        p++;
    }
    p++;
    char *temp = malloc(sizeof(char) * 1000);
    strcpy(temp, p);
    char *token = strtok(temp, " ");
    while (token != NULL) {
        retArr[(*size)] = malloc(sizeof(char) * 1000);
        strcpy(retArr[(*size)], token);
        (*size)++;
        token = strtok(NULL, " ");
    }
    return retArr;
}
char *getName(char *s, char *rootPath)
{
    char *ret = malloc(sizeof(char) * 1000);
    strcpy(ret, rootPath);
    ret[strlen(rootPath)] = '/';
    for (int i = 0; i < strlen(s); i++) {
        if (s[i] != '(') {
            ret[strlen(rootPath) + i + 1] = s[i];
        } else {
            ret[strlen(rootPath) + i + 1] = '\0';
            break;
        }
    }
    return ret;
}
char *getContent(char *s)
{
    char *ret = malloc(sizeof(char) * 1000);
    char *p = s;
    while ((*p) != '(') {
        p++;
    }
    p++;
    strcpy(ret, p);
    ret[strlen(p) - 1] = '\0';
    return ret;
}
char *** findDuplicate(char ** paths, int pathsSize, int* returnSize, int** returnColumnSizes){
    
    for (int i = 0; i < pathsSize; i++) {
        int size = 0;
        char *rootPath = getRootPath(paths[i]);
        char **fileContent = getFileContent(paths[i], &size);
        for (int j = 0; j < size; j++) {
            char *fileName = getName(fileContent[j], rootPath);
            char *content = getContent(fileContent[j]);
            addNode(content, fileName);
        }
    }
    struct hash_node *cur, *tmp;
    (* returnSize) = 0;
    (* returnColumnSizes) = malloc(sizeof(int) *  1000);
    char ***retArr = malloc(sizeof(char **) * 1000);
    HASH_ITER(hh, g_hash, cur, tmp) {
        if (cur->pathNum > 1) {
            retArr[(*returnSize)] = cur->path;
            (*returnColumnSizes)[(*returnSize)] = cur->pathNum;
            (*returnSize)++;
        }
    }
    deleteAll();
    return retArr;
}
