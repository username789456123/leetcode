int cmp(const void* ptr1, const void* ptr2) {
    return *((int*)ptr1) > *((int*)ptr2);
}

int** threeSum(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {
	int **ans = (int**)malloc(sizeof(int*) * 18000);
	int ansTop = 0;
	if(numsSize < 3) {
        *returnSize = 0;
        return ans;
    }
    qsort(nums, numsSize, sizeof(int), cmp);
    int i;
    for(i = 0; i < numsSize - 2; i++) {
    	if(nums[i] > 0)
            break;
        if(i > 0 && nums[i] == nums[i-1])
            continue;
        int left = i + 1;
        int right = numsSize - 1;
        while(right > left) {
        	int sum = nums[right] + nums[left] + nums[i];
        	if(sum < 0)
                left++;
            else if(sum > 0)
                right--;
            else {
            	int* arr = (int*)malloc(sizeof(int) * 3);
                arr[0] = nums[i];
                arr[1] = nums[left];
                arr[2] = nums[right];
                ans[ansTop++] = arr;
                while(right > left && nums[right] == nums[right - 1])
                    right--;
                while(left < right && nums[left] == nums[left + 1])
                    left++;
                left++;
                right--;
            }
        }
    }
    *returnSize = ansTop;
    *returnColumnSizes = (int*)malloc(sizeof(int) * ansTop);
    int z;
    for(z = 0; z < ansTop; z++) {
        (*returnColumnSizes)[z] = 3;
    }
    return ans;
}
