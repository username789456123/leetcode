typedef struct PointTypeT {
    int x;
    int y;
}PointType;

#define MAX_NUM 500
#define MAX_AREA 1600000001
#define MAX_HASH 5001

int CompXY(void *a, void *b)
{
    return (((PointType*)a)->x)*(((PointType*)a)->y) - (((PointType*)b)->x)*(((PointType*)b)->y);
}

int HashXY(int x, int y) {
    return (x * 131 + y * 13) % MAX_HASH;
}

void MapXY(int x, int y, PointType *HashTable)
{
    int index = -1;
    index = HashXY(x,y);
    while((HashTable[index].x != -1) || (HashTable[index].y != -1)) {
        index = (index+1) % MAX_HASH;
    }
    HashTable[index].x = x;
    HashTable[index].y = y;
    return;
}

bool FindXY(int x, int y, PointType *HashTable)
{
    int index = -1;

    index = HashXY(x,y);
    while((HashTable[index].x != x) || (HashTable[index].y != y)) {
        if ((HashTable[index].x == -1) && (HashTable[index].y == -1)) {
            return false;
        }
        index = (index+1) % MAX_HASH;
    }

    return true;
}

int minAreaRect(int** points, int pointsSize, int* pointsColSize){
    PointType list[MAX_NUM];   
    PointType *HashTable;
    int minArea = MAX_AREA;
    int i,j;

    if (pointsSize < 4) {
        return 0;
    }
    
    HashTable = malloc(sizeof(PointType)*MAX_HASH);

    memset(list,-1,sizeof(list));
    memset(HashTable,-1,sizeof(PointType)*MAX_HASH);

    for (i=0; i<pointsSize; i++) {
        list[i].x = points[i][0];
        list[i].y = points[i][1];
        MapXY(list[i].x,list[i].y,HashTable);
    }

    // 排序，以x轴*y轴的取值为key，从小到大排序
    qsort(list,pointsSize,sizeof(PointType),CompXY);

    bool havePoint1;
    bool havePoint2;
    int newArea = 0;
    for(i=0; i<pointsSize; i++) {        
        for(j=i+1; j<pointsSize; j++) {
            if ((list[i].x < list[j].x) && (list[i].y < list[j].y)) {
                newArea = (list[j].x - list[i].x) * (list[j].y - list[i].y);
                if (newArea >= minArea) {
                    continue;
                }
                // 检查另外两个坐标在不在
                // X1 = list[i].x 
                // Y1 = list[i].y
                // X2 = list[j].x
                // Y2 = list[j].y
                // 求 [X1,Y2], [X2,Y1] 是否存在
                havePoint1 = FindXY(list[i].x,list[j].y,HashTable);
                havePoint2 = FindXY(list[j].x,list[i].y,HashTable);
                if ((havePoint1)&&(havePoint2)) {
                    minArea = newArea;
                }
            }
        }
    }

    if (minArea >= MAX_AREA) {
        minArea = 0;
    }

    return minArea;
}
