#define maxTop 45
//点结构
typedef struct _Point
{
    int x;
    int y;
    int v;
} point;
point top_1[maxTop];//第一张图片1最集中的点
point top_2[maxTop];//第二章图片的

//寻找集中点
void findTop(int **img, int size, point *top)
{
    for (int y = 0; y < size; y++)
    {
        for (int x = 0; x < size; x++)
        {
            int v = 0;
            if (img[y][x] == 0)
                continue;
            else
                v = 1;

            if (y > 0 && img[(y - 1)][x] > 0)
                v++;
            if (y < size - 1 && img[(y + 1)][x] > 0)
                v++;
            if (x > 0 && img[y][x - 1] > 0)
                v++;
            if (x < size - 1 && img[y][x + 1] > 0)
                v++;

            if (y > 1 && img[(y - 2)][x] > 0)
                v++;
            if (y < size - 2 && img[(y + 2)][x] > 0)
                v++;
            if (x > 1 && img[y][x - 2] > 0)
                v++;
            if (x < size - 2 && img[y][x + 2] > 0)
                v++;

            if (x > 0 && y > 0 && img[(y - 1)][x - 1] > 0)
                v++;
            if (x > 0 && y < size - 1 && img[(y + 1)][x - 1] > 0)
                v++;
            if (x < size - 1 && y > 0 && img[y - 1][x + 1] > 0)
                v++;
            if (x < size - 1 && y < size - 1 && img[y + 1][x + 1] > 0)
                v++;

            for (int i = 0; i < maxTop; i++)
            {
                if (v > top[i].v)
                {
                    top[i].v = v;
                    top[i].x = x;
                    top[i].y = y;
                    break;
                }
            }
        }
    }
}

int largestOverlap(int **img1, int img1Size, int *img1ColSize, int **img2, int img2Size, int *img2ColSize)
{
    int ret = 0;
    for (int i = 0; i < maxTop; i++)
    {
        top_1[i].x = -1;
        top_1[i].y = -1;
        top_1[i].v = -1;
        top_2[i].x = -1;
        top_2[i].y = -1;
        top_2[i].v = -1;
    }

    findTop(img1, img1Size, top_1);
    findTop(img2, img2Size, top_2);

    //按最集中的点对齐比较
    for (int i = 0; i < maxTop; i++)
    {
        if (top_1[i].v == -1)
            break;
        for (int j = 0; j < maxTop; j++)
        {
            if (top_2[j].v == -1)
                break;
            int offset_x = top_2[j].x - top_1[i].x;
            int offset_y = top_2[j].y - top_1[i].y;
            int v = 0;
            for (int y1 = 0; y1 < img2Size; y1++)
                for (int x1 = 0; x1 < img2Size; x1++)
                {
                    int y_1 = y1 - offset_y;
                    int x_1 = x1 - offset_x;
                    if (y_1 < 0 || x_1 < 0 || y_1 > img2Size - 1 || x_1 > img2Size - 1)
                        continue;
                    if (img1[y_1][x_1] == 1 && img2[y1][x1] == 1)
                        v++;
                }
            if (v > ret)
                ret = v;
        }
    }
    return ret;
}
