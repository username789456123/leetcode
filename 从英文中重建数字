//0 zero 1 one 2 two 3 three 4 four 5 five 6 six 7 seven 8 eight 9nine
// 0:z 1:o 2:w 3:r 4:u 5:f 6:x 7:s 8:g 9:n
// 0 zero 1 one 2 two 3 three 4 four 5 five 6 six 7 seven 8 eight 9 nine
 //  z     o-024   w    t-2-8    u      f-4    x     v-5      g    i-568
// 1:先确认0个数，再确认2个数，确认4个数 5个数、6;1;7;9;3;8

char * originalDigits(char * s){
    int buf[26] = {0};
    int numSize[10] = {0};
    int len = strlen(s);
    for (int i = 0; i < len; i++) {
        buf[s[i] - 'a']++;
    }
    int size = 1;
    numSize[0] = buf['z' - 'a'];
    numSize[2] = buf['w' - 'a'];
    numSize[4] = buf['u' - 'a'];
    numSize[6] = buf['x' - 'a'];
    numSize[8] = buf['g' - 'a'];
    numSize[1] = buf['o' - 'a'] - numSize[0] - numSize[2] - numSize[4];
    numSize[3] = buf['t' - 'a'] - numSize[2] - numSize[8];
    numSize[5] = buf['f' - 'a'] - numSize[4];
    numSize[9] = buf['i' - 'a'] - numSize[5] - numSize[6] - numSize[8];
    numSize[7] = buf['v' - 'a'] - numSize[5];
   
    for (int i = 0; i < 10; i++) {
        size += numSize[i];
    }
    char *ret = (int*)malloc(sizeof(char) * size);
    memset(ret, 0, sizeof(char) * size);
    int flag = 0;
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < numSize[i]; j++) {
            ret[flag++] = '0' + i;
        }
    }
    return ret;
}
