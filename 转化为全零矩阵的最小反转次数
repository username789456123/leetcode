uint8_t tmpMat[3][3];
int flip11() {
    return tmpMat[0][0];
}
int flip12() {
    return tmpMat[0][0] + tmpMat[0][1] == 0 ? 0 :
           tmpMat[0][0] + tmpMat[0][1] == 2 ? 1 :
                                             -1;
}
int flip13() {
    switch (tmpMat[0][0] + tmpMat[0][1] + tmpMat[0][2]) {
        case 0: return 0;
        case 1: return tmpMat[0][1] == 1 ? 3 : 2;
        case 2: return tmpMat[0][1] == 1 ? 1 : 2;
        case 3: return 1;
    }
    return -2;
}
int flip22() {
    switch (tmpMat[0][0] + tmpMat[1][0] + tmpMat[0][1] + tmpMat[1][1]) {
        case 0: return 0;
        case 1: return 3;
        case 2: return 2;
        case 3: return 1;
        case 4: return 4;
    }
    return -2;
}
int flip23() {
    switch (tmpMat[0][0] + tmpMat[1][0] + tmpMat[0][2] + tmpMat[1][2]) {
        case 1: case 3: {   // 奇数个角点必不可能
            return -1;
        } 
        case 0: {
            return tmpMat[0][1] == 1 && tmpMat[1][1] == 1 ? 2 : // 无角点, 两边点
                   tmpMat[0][1] == 0 && tmpMat[1][1] == 0 ? 0 : // 无点
                                                           -1;  // 无角点, 0/1个边点
        }
        case 2: {
            if (tmpMat[0][0] + tmpMat[1][0] == 2 || tmpMat[0][2] + tmpMat[1][2] == 2)
                return tmpMat[0][1] + tmpMat[1][1] == 1 ? 1 : -1;   // 两临角点只可加一边点
            else if (tmpMat[0][0] + tmpMat[1][2] == 2 || tmpMat[0][2] + tmpMat[1][0] == 2)
                return tmpMat[0][1] + tmpMat[1][1] == 1 ? 2 : -1;    // 两远对角点只可加一边点
            else    // 两近对角点可以被右上三角表出, 从而类似于0角点情形
                return tmpMat[0][1] == 1 && tmpMat[1][1] == 1 ? 1 : // 边点
                       tmpMat[0][1] == 0 && tmpMat[1][1] == 0 ? 3 :
                                                               -1;
        }
        case 4: {
            return tmpMat[0][1] ^ tmpMat[1][1] == 0 ? 2 :   // 四角点(+0/2边点)
                                                     -1;    // 四角点+1边点, 不可能
        }
    }
    return -2;
}
int flip33() {
    uint8_t mat[3][3] = {};
    for (int i = 0; i < 3; ++ i) {
        for (int j = 0; j < 3; ++ j) {
            if (tmpMat[i][j] == 1) {
                if (i % 2 == 0 && j % 2 == 0) { // 角点
                    mat[i][j] ^= 1;
                    mat[2 - i][j] ^= 1;
                    mat[i][2 - j] ^= 1;
                    mat[2 - i][1] ^= 1;
                    mat[1][2 - j] ^= 1;
                }
                else if (i == 1 && j == 1) {    // 中心点
                    mat[0][1] ^= 1;
                    mat[1][0] ^= 1;
                    mat[1][1] ^= 1;
                    mat[1][2] ^= 1;
                    mat[2][1] ^= 1;
                }
                else {  // 边点
                    if (j == 1) {
                        mat[1][1] ^= 1;
                        mat[2 - i][0] ^= 1;
                        mat[2 - i][1] ^= 1;
                        mat[2 - i][2] ^= 1;
                    }
                    if (i == 1) {
                        mat[1][1] ^= 1;
                        mat[0][2 - j] ^= 1;
                        mat[1][2 - j] ^= 1;
                        mat[2][2 - j] ^= 1;
                    }
                }
            }
        }
    }
    return mat[0][0] + mat[0][1] + mat[0][2] + mat[1][0] + mat[1][1] + mat[1][2] + mat[2][0] + mat[2][1] + mat[2][2];
}
int minFlips(int** mat, int matSize, int* matColSize){
    int m = matSize, n = matColSize[0];
    memset(tmpMat, 0, 3 * 3 * sizeof(uint8_t));
    for (int i = 0; i < m; ++ i)    // tmpMat 满足 m <= n, 否则转置 mat
        for (int j = 0; j < n; ++ j)
            if (m <= n)
                tmpMat[i][j] = mat[i][j];
            else
                tmpMat[j][i] = mat[i][j];
    if (m > n) {
        int tmpN = n;
        n = m;
        m = tmpN;
    }
    switch (10 * m + n) {
        case 11: return flip11();
        case 12: return flip12();
        case 13: return flip13();
        case 22: return flip22();
        case 23: return flip23();
        case 33: return flip33();
    }
    return -3;
}
