//代码示例   标准堆 存储数据
typedef struct Heap
{
    int* array;   //存放堆的数组
    int* start;
    int  capacity;//数组的容量
    int  len;     //已存数组的大小
}Heap;
//#define maxHeap                                         /*大小根堆切换开关*/
int  HeapLen(Heap* hp);                                 //heap获取当前的堆大小
void HeapSwap(int* pLeft, int* pRight);                 //heap交换父子结点的数值
bool HeapEmpty(Heap* hp);                               //heap判空
bool HeapFull(Heap* hp);                                //heap判满
int  HeapGetTop(Heap* hp);                              //heap获取堆顶
void HeapInsert(Heap* hp, int  dat,int start);          //heap向堆的尾部插入1个元素
void HeapDelete(Heap* hp);                              //heap删除堆顶
void HeapAdjustDown(Heap* hp, int parent);              //heap向下调整
void HeapAdjustUp(Heap* hp, int child);                 //heap向上调整
Heap* CreateHeap(int size);                 //heap创建
void heapFree(Heap* hp);                                //heap释放空间


int HeapLen(Heap* hp)
{
    return hp->len;
}



bool HeapEmpty(Heap* hp)          //判空
{
    if (HeapLen(hp) == 1)
    {
        return true;
    }
    return false;
}

bool HeapFull(Heap* hp)          //判满
{
    if (hp->capacity == hp->len)
    {
        return true;
    }
    return false;
}


void HeapSwap(int* pLeft, int* pRight)//交换数值
{
    //交换堆中的父子结点
    int  temp;
    temp = *pLeft;
    *pLeft = *pRight;
    *pRight = temp;
}

int HeapGetTop(Heap* hp)
{
    return hp->array[1];
}

void HeapDelete(Heap* hp)//删除堆顶
{
    if (HeapEmpty(hp))
        return;

    //用最后一个元素覆盖堆顶，相当于删除堆顶
    hp->array[1] = hp->array[hp->len - 1];
    hp->start[1] = hp->start[hp->len - 1];
    hp->len--;//删除最后一个元素 heap长度变短
    HeapAdjustDown(hp, 1);//对第一个元素进行调整
}



void HeapInsert(Heap* hp, int  dat,int start)
{
    if (HeapFull(hp))
        return;
    int child = 0;
    int parent = 0;
    //插入到最后一个元素的下一个位置
    hp->array[hp->len] = dat;
    hp->start[hp->len] = start;
    hp->len++;
    //调整刚插入元素，
    //因为插入的是堆的尾部，需要堆向上调整
    HeapAdjustUp(hp, hp->len - 1);
}



Heap* CreateHeap( int size)//创建
{
    Heap* heap = (Heap*)malloc(sizeof(Heap));
    int   heapLen = size + 1;//长度比size的长度大1才行
    //给堆申请空间,初始化
    heap->array = (int*)malloc(sizeof(int) * heapLen);
    heap->start = (int*)malloc(sizeof(int) * heapLen);
    heap->capacity = heapLen;     //容量
    heap->len       = 1;     //当前大小
    return heap;
}

void HeapAdjustDown(Heap* hp, int parent)//向下调整
{
    //标记左右孩子中最小孩子
    int child = 2 * parent;            //左孩子为2*parent  右孩子为 2*parent +1
    int len = hp->len;

    while (child < len)
    {
        //小根堆  选最小的
        //有右子树时 ，找左右孩子中最小的孩子 
        if ((child + 1 < len) && hp->array[child] > hp->array[child + 1])
            child = child + 1;

        //最小孩子小于双亲时 ，孩子与双亲数值交换，否则说明已经调好，不用继续
        if (hp->array[child] < hp->array[parent])
        {
            HeapSwap(&hp->array[child], &hp->array[parent]);
            HeapSwap(&hp->start[child], &hp->start[parent]);
            parent = child;
            child = parent << 1;
        }
        else
            return;
    }
}




void HeapAdjustUp(Heap* hp, int child)//向上调整
{
    //得到父母结点的位置
    int parent = child / 2;
    //小根堆选择小的
    //循环迭代从child当前位置一直迭代到0位置即对顶
    while (child > 1)
    {
        if (hp->array[child] < hp->array[parent])
        {
            HeapSwap(&hp->array[child], &hp->array[parent]);
            HeapSwap(&hp->start[child], &hp->start[parent]);
            child = parent;
            parent = child/2;
        }
        else
            return;
    }
}

void heapFree(Heap* hp)
{
    free(hp->array);
    free(hp);
}


// 由小到大排序
int compare(const void *a, const void *b) 
{
    int ** _a = a;
    int**  _b = b;
	return (*_a )[0]-  (*_b )[0];
}

int maxEvents(int** events, int eventsSize, int* eventsColSize)
{
    //小根堆
    qsort(events,eventsSize,sizeof(int *),compare);
    Heap* newHeap = CreateHeap(eventsSize);

    int  day   = 1;
    int  count = 0;
    int  index    = 0;
    //两个条件1 index没有遍历完   2 newHeap不为空
    while(index < eventsSize || !HeapEmpty(newHeap)) 
    {
        while( index < eventsSize && events[index][0] <= day)
        {
            int eventStart = events[index][0];
            int eventEnd   = events[index][1];
            //将能够开始的会议放入的最小堆当中
            HeapInsert(newHeap ,eventEnd, eventStart);
            index++;
        }

        while(!HeapEmpty(newHeap))
        {
            //今天去参加一场会议
            int eventEnd  = newHeap->array[1];
            HeapDelete(newHeap);
            if(day <= eventEnd)
            {
                //判断截止日期是否满足
                count++;
                break;
            }
        }
        day++;
    }
    return count;
}
