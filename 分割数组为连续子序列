typedef struct Heap
{
    int* array;   //存放堆的数组
    int* count;
    int  capacity;//数组的容量
    int  len;     //已存数组的大小
}Heap;
//#define maxHeap                                         /*大小根堆切换开关*/
int  HeapLen(Heap* hp);                                 //heap获取当前的堆大小
void HeapSwap(int* pLeft, int* pRight);                 //heap交换父子结点的数值
bool HeapEmpty(Heap* hp);                               //heap判空
bool HeapFull(Heap* hp);                                //heap判满
int  HeapGetTop(Heap* hp);                              //heap获取堆顶
void HeapInsert(Heap* hp, int  dat);                    //heap向堆的尾部插入1个元素
void HeapDelete(Heap* hp);                              //heap删除堆顶
void HeapAdjustDown(Heap* hp, int parent);              //heap向下调整
void HeapAdjustUp(Heap* hp, int child);                 //heap向上调整
Heap* CreateHeap(int size);                             //heap创建
void heapFree(Heap* hp);                                //heap释放空间


int HeapLen(Heap* hp)
{
    return hp->len;
}



bool HeapEmpty(Heap* hp)          //判空
{
    if (HeapLen(hp) == 1)
    {
        return true;
    }
    return false;
}

bool HeapFull(Heap* hp)          //判满
{
    if (hp->capacity == hp->len)
    {
        return true;
    }
    return false;
}


void HeapSwap(int* pLeft, int* pRight)//交换数值
{
    //交换堆中的父子结点
    int  temp;
    temp = *pLeft;
    *pLeft = *pRight;
    *pRight = temp;
}

int HeapGetTop(Heap* hp)
{
    return hp->array[1];
}

void HeapDelete(Heap* hp)//删除堆顶
{
    if (HeapEmpty(hp))
        return;

    //用最后一个元素覆盖堆顶，相当于删除堆顶
    hp->array[1] = hp->array[hp->len - 1];
    hp->len--;//删除最后一个元素 heap长度变短
    HeapAdjustDown(hp, 1);//对第一个元素进行调整
}



void HeapInsert(Heap* hp, int  dat)
{
    if (HeapFull(hp))
        return;
    int child = 0;
    int parent = 0;
    //插入到最后一个元素的下一个位置
    hp->array[hp->len++] = dat;
    //调整刚插入元素，
    //因为插入的是堆的尾部，需要堆向上调整
    HeapAdjustUp(hp, hp->len - 1);
}



Heap* CreateHeap(int size)//创建
{
    Heap* heap = (Heap*)malloc(sizeof(Heap));
    int   heapLen = size + 1;//长度比size的长度大1才行
    //给堆申请空间,初始化
    heap->array = (int*)malloc(sizeof(int) * heapLen);

    //数组中元素放到堆中
    heap->capacity  = heapLen;     //容量
    heap->len       = 1;     //当前大小
    return heap;
}

void HeapAdjustDown(Heap* hp, int parent)//向下调整
{
    //标记左右孩子中最小孩子
    int child = 2 * parent;            //左孩子为2*parent  右孩子为 2*parent +1
    int len = hp->len;

    while (child < len)
    {
        //小根堆  选最小的
        //有右子树时 ，找左右孩子中最小的孩子 
        if ((child + 1 < len) && hp->array[child] > hp->array[child + 1])
            child = child + 1;

        //最小孩子小于双亲时 ，孩子与双亲数值交换，否则说明已经调好，不用继续
        if (hp->array[child] < hp->array[parent])
        {
            HeapSwap(&hp->array[child], &hp->array[parent]);
            parent = child;
            child = parent << 1;
        }
        else
            return;
    }
}




void HeapAdjustUp(Heap* hp, int child)//向上调整
{
    //得到父母结点的位置
    int parent = child / 2;

    //小根堆选择小的
    //循环迭代从child当前位置一直迭代到0位置即对顶
    while (child > 1)
    {
        if (hp->array[child] < hp->array[parent])
        {
            HeapSwap(&hp->array[child], &hp->array[parent]);
            child = parent;
            parent = child/2;
        }
        else
            return;
    }

}

void heapFree(Heap* hp)
{
    free(hp->array);
    free(hp);
}



//hashSet代码
#define MAXSIZE 769/* 选取一个质数即可 */
typedef struct Node 
{
    int         elem;
    Heap*       newHeap;
    struct Node *next;  //保存链表表头
} List;


typedef struct 
{
    List *hashHead[MAXSIZE];//定义哈希数组的大小
} MyHashSet;


bool isInHash(List *list, int key) 
{
    List *nodeIt = list;
    //通过链表下遍历
    while (nodeIt != NULL) 
    {
        if (nodeIt->elem == key) 
        {
            return true;
        }
        nodeIt = nodeIt->next;
    }
    return false;
}

MyHashSet* myHashSetCreate() 
{
    int i;
    MyHashSet* newHash= (MyHashSet* )malloc(sizeof(MyHashSet));
    /* 对链表的头结点赋初值 */
    for (i = 0; i < MAXSIZE; i++)
    {
        newHash->hashHead[i] = NULL;
    }
    return newHash;
}

void myHashSetAdd(MyHashSet* obj, int key) 
{
    //插入在Head处
    if(isInHash(obj->hashHead[abs(key)%MAXSIZE],key))
    {
        //不用添加了
        return;
    }
    List *newNode = (List*)malloc(sizeof(List));
    newNode->elem = key;
    newNode->next = NULL;
    if(obj->hashHead[abs(key)%MAXSIZE] != NULL)
    {
        //当前头链表不为空，则需要将后续的链表接上
        //需要主要这里表头也代表一个数据的值
        newNode->next = obj->hashHead[abs(key)%MAXSIZE];
    }
    //修改头链表
    obj->hashHead[abs(key)%MAXSIZE] =  newNode;

}

void myHashSetRemove(MyHashSet* obj, int key) 
{
    List *preIt = NULL;
    List *curIt = obj->hashHead[abs(key)%MAXSIZE];
    //通过链表下遍历
    while (curIt != NULL) 
    {
        if (curIt->elem == key) 
        {
            break;
        }
        preIt = curIt;
        curIt = curIt->next;
    }

    if(curIt == NULL)
    {
        //没有找到
        return;
    }

    //找到了
    if(preIt == NULL)
    {
        //等于表头
        obj->hashHead[abs(key)%MAXSIZE] = curIt->next;
    }
    else
    {

        preIt->next = curIt->next;
    }
    free(curIt);
    
    
}

List * myHashSetContains(MyHashSet* obj, int key) 
{
    List *nodeIt = obj->hashHead[abs(key)%MAXSIZE];
    //通过链表下遍历
    while (nodeIt != NULL) 
    {
        if (nodeIt->elem == key) 
        {
            return nodeIt;
        }
        nodeIt = nodeIt->next;
    }
    return NULL;
}

void myHashSetFree(MyHashSet* obj) 
{
    int i;
   List *freeIt;
   List *curIt;
   for (i = 0; i < MAXSIZE; i++)
    {
        if(obj->hashHead[i] != NULL)
        {
            freeIt = NULL;
            curIt  = obj->hashHead[i];
            
            while(curIt != NULL)
            {
                freeIt = curIt;
                curIt= curIt->next;
                free(freeIt);
            }
            obj->hashHead[i]= NULL;
        }
    }
    free(obj);
}



bool isPossible(int* nums, int numsSize)
{
    MyHashSet* newHashSet = myHashSetCreate();
    for (int i = 0; i < numsSize; i++)
    {
        int target = nums[i];
        List* preNode    = myHashSetContains(newHashSet, target - 1);
        List* targetNode = myHashSetContains(newHashSet, target); 
        if (preNode != NULL && !HeapEmpty(preNode->newHeap))
        {
            //存在在最小堆
            int minCount = HeapGetTop(preNode->newHeap);
            HeapDelete(preNode->newHeap);
            if (targetNode  == NULL)
            {
                myHashSetAdd(newHashSet,target);
                targetNode = myHashSetContains(newHashSet, target); 
                targetNode->newHeap = CreateHeap(numsSize);
            }
            HeapInsert( targetNode->newHeap , minCount + 1);
        }
        else
        {
            if (targetNode == NULL)
            {
                myHashSetAdd(newHashSet,target);
                targetNode = myHashSetContains(newHashSet, target); 
                targetNode->newHeap = CreateHeap(numsSize);
            }
            HeapInsert(targetNode->newHeap , 1);
        }
    }
    //最后再遍历一次

    //释放空间以及遍历
    List *freeIt;
    List *curIt;
    bool  isOk = true;
    for (int i = 0; i < MAXSIZE; i++)
    {
        if(newHashSet->hashHead[i] != NULL)
        {
            freeIt = NULL;
            curIt  = newHashSet->hashHead[i]; 
            while(curIt != NULL)
            {
                freeIt = curIt;
                curIt= curIt->next;
                if( !HeapEmpty(freeIt->newHeap) )
                {
                    if(isOk)
                    {
                        if(HeapGetTop(freeIt->newHeap) <3)
                        {
                            isOk = false;
                        }
                    }
                    free(freeIt->newHeap->array);
                    free(freeIt->newHeap);
                }
                free(freeIt);
            }
            newHashSet->hashHead[i]= NULL;
        }
    }
    free(newHashSet);
    return isOk;
}
