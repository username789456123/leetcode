char * stringAdd(const char * s, int firstStart, int firstEnd, int secondStart, int secondEnd) {
    char * third = (char *)malloc(sizeof(char) * (strlen(s) + 1));
    int thirdSize = 0;
    int carry = 0, cur = 0;
    
    while (firstEnd >= firstStart || secondEnd >= secondStart || carry != 0) {
        cur = carry;
        if (firstEnd >= firstStart) {
            cur += s[firstEnd] - '0';
            --firstEnd;
        }
        if (secondEnd >= secondStart) {
            cur += s[secondEnd] - '0';
            --secondEnd;
        }
        carry = cur / 10;
        cur %= 10;
        third[thirdSize] = cur + '0';
        thirdSize++;
    }

    int left = 0;
    int right = thirdSize - 1;
    while (left < right) {
        char c = third[left];
        third[left] = third[right];
        third[right] = c;
        ++left;
        --right;
    }
    third[thirdSize] = '\0';
    return third;
}

bool valid(int secondStart, int secondEnd, const char * num) {
    int n = strlen(num);
    int firstStart = 0, firstEnd = secondStart - 1;
    while (secondEnd <= n - 1) {
        char * third = stringAdd(num, firstStart, firstEnd, secondStart, secondEnd);
        int thirdStart = secondEnd + 1;
        int thirdEnd = secondEnd + strlen(third);
        if (thirdEnd >= n || strncmp(num + thirdStart, third, thirdEnd - thirdStart + 1)) {
            free(third);
            break;
        }
        free(third);
        if (thirdEnd == n - 1) {
            return true;
        }
        firstStart = secondStart;
        firstEnd = secondEnd;
        secondStart = thirdStart;
        secondEnd = thirdEnd;
    }
    return false;
}


bool isAdditiveNumber(char * num){
    int n = strlen(num);
    for (int secondStart = 1; secondStart < n - 1; ++secondStart) {
        if (num[0] == '0' && secondStart != 1) {
            break;
        }
        for (int secondEnd = secondStart; secondEnd < n - 1; ++secondEnd) {
            if (num[secondStart] == '0' && secondStart != secondEnd) {
                break;
            }
            if (valid(secondStart, secondEnd, num)) {
                return true;
            }
        }
    }
    return false;
}
