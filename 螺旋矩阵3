int** spiralMatrixIII(int rows, int cols, int rStart, int cStart, int* returnSize, int** returnColumnSizes) {
    int** ans = (int**)calloc(rows * cols, sizeof(int*));
    *returnColumnSizes = (int*)calloc(rows * cols, sizeof(int));
    *returnSize = rows * cols;
    for (int i = 0; i < rows * cols; i++) {
        ans[i] = (int*)calloc(2, sizeof(int));
        (*returnColumnSizes)[i] = 2;
    }
    int around[4][2] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};  //顺时针方向
    int x = rStart, y = cStart, num = 1, dir = 0;  //{x, y}为当前位置，num为当前查找的数字，dir为当前的方向
    int Left = cStart - 1, Right = cStart + 1, Upper = rStart - 1, Bottom = rStart + 1;  //四个方向的边界
    while (num <= rows * cols) {
        if (x >= 0 && x < rows && y >= 0 && y < cols) {  //{x， y}位置在矩阵中
            ans[num - 1][0] = x;
            ans[num - 1][1] = y;
            num += 1;
        }
        if (dir == 0 && y == Right) {  //向右到右边界
            dir += 1;  //调转方向向下
            Right += 1;  //右边界右移
        } else if (dir == 1 && x == Bottom) {  //向下到底边界
            dir += 1;
            Bottom += 1;  //底边界下移
        } else if (dir == 2 && y == Left) {  //向左到左边界
            dir += 1;
            Left--;  //左边界左移
        } else if (dir == 3 && x == Upper) {  //向上到上边界
            dir = 0;
            Upper--;  //上边界上移
        }
        x += around[dir][0];   //下一个节点
        y += around[dir][1];
    }
    return ans;
}
