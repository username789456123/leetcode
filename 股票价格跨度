typedef struct {
    int *temp;
    int *count;
    int len;
} StockSpanner;


StockSpanner* stockSpannerCreate() {
    StockSpanner* obj=malloc(sizeof(StockSpanner));
    obj->temp=malloc(sizeof(int)*10001);
    obj->count=malloc(sizeof(int)*10001);
    memset(obj->count,0,sizeof(int)*10001);
    obj->len=0;
    return obj;
}

int stockSpannerNext(StockSpanner* obj, int price) {
    if(obj->len==0){
        obj->temp[obj->len]=price;
        obj->count[obj->len++]=1;
        return obj->count[obj->len-1];
    }
    else{
        if(price<obj->temp[obj->len-1]){
            obj->temp[obj->len]=price;
            obj->count[obj->len++]=1;
            return 1;
        }
        else if(price<obj->temp[obj->len-1]){
            obj->temp[obj->len]=price;
            obj->count[obj->len]=1+obj->count[obj->len-1];
            obj->len++;
            return obj->count[obj->len-1];
        }
        else{
            int i,num=0;
            for(i=obj->len-obj->count[obj->len-1]-1;i>-1;i--){
                if(price<obj->temp[i]) break;
                else num++;
            }
            obj->temp[obj->len]=price;
            obj->count[obj->len]=1+num+obj->count[obj->len-1];
            obj->len++;
            return obj->count[obj->len-1];
        }
    }
}

void stockSpannerFree(StockSpanner* obj) {
    free(obj->temp);
    free(obj->count);
    free(obj);
}
