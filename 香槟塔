    //香槟向下倒，每个地方的都不一样，可能同一层还没满，下一层就有了
    //首先确定香槟到第几层了，向前递归

    //层层递归向下，我们先假设每个杯子可以存好多，然后在遍历下一层的时候，就可以

double champagneTower(int poured, int query_row, int query_glass){
    //层层遍历  
    double dp[query_row + 1][query_row + 1] ;
    //节约空间，我们只需要行数大小的矩阵就可以
    memset(dp, 0, sizeof(dp));
    //整个数据结构需要改变成三角形：dp[i][j] = (dp[i-1][j-1] + dp[i-1][j])/2
    dp[0][0] = poured;
    int i,j,flag;
    for(i = 0; i < query_row ; i++){
        flag = 0;
        for(j = 0; j < i+1; j++){
            if(dp[i][j] > 1){
                dp[i][j] -= 1;
                dp[i+1][j] += (dp[i][j] / 2);
                dp[i+1][j+1] += (dp[i][j] / 2);
                //dp[i][j] = 1;做dp最好加上
            }else{
                flag += 1;
            }
        }
        if(flag == i+1){
            break;
        }
        //可以增加一个flag，来判断，可以少一点点时间
    }

    return (dp[query_row][query_glass] > 1) ? 1 : dp[query_row][query_glass];
} 
