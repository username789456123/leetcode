struct node {
    int ch[26];
    int flag;
} tree[100001];
int tree_len;

void reset(struct node* p) {
    memset(p->ch, 0, sizeof(int) * 26);
    p->flag = -1;
}

void insert(char* s, int id) {
    int len = strlen(s), add = 0;
    for (int i = 0; i < len; i++) {
        int x = s[i] - 'a';
        if (!tree[add].ch[x]) {
            tree_len++;
            reset(&tree[tree_len - 1]);
            tree[add].ch[x] = tree_len - 1;
        }
        add = tree[add].ch[x];
    }
    tree[add].flag = id;
}

int findWord(char* s, int left, int right) {
    int add = 0;
    for (int i = right; i >= left; i--) {
        int x = s[i] - 'a';
        if (!tree[add].ch[x]) {
            return -1;
        }
        add = tree[add].ch[x];
    }
    return tree[add].flag;
}

bool isPalindrome(char* s, int left, int right) {
    int len = right - left + 1;
    for (int i = 0; i < len / 2; i++) {
        if (s[left + i] != s[right - i]) {
            return false;
        }
    }
    return true;
}

int** palindromePairs(char** words, int wordsSize, int* returnSize, int** returnColumnSizes) {
    reset(&tree[0]);
    tree_len = 1;
    for (int i = 0; i < wordsSize; i++) {
        insert(words[i], i);
    }
    int** ret = malloc(sizeof(int*) * 10001);
    (*returnColumnSizes) = malloc(sizeof(int) * 10001);
    for (int i = 0; i < 10001; i++) {
        ret[i] = malloc(sizeof(int) * 2);
        (*returnColumnSizes)[i] = 2;
    }
    int ret_len = 0;
    for (int i = 0; i < wordsSize; i++) {
        int m = strlen(words[i]);
        for (int j = 0; j <= m; j++) {
            if (isPalindrome(words[i], j, m - 1)) {
                int left_id = findWord(words[i], 0, j - 1);
                if (left_id != -1 && left_id != i) {
                    ret_len++;
                    ret[ret_len - 1][0] = i;
                    ret[ret_len - 1][1] = left_id;
                }
            }
            if (j && isPalindrome(words[i], 0, j - 1)) {
                int right_id = findWord(words[i], j, m - 1);
                if (right_id != -1 && right_id != i) {
                    ret_len++;
                    ret[ret_len - 1][0] = right_id;
                    ret[ret_len - 1][1] = i;
                }
            }
        }
    }
    (*returnSize) = ret_len;
    return ret;
}
