/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* sumEvenAfterQueries(int* A, int ASize, int** queries, int queriesSize, int* queriesColSize, int* returnSize){
    *returnSize = queriesSize;
    int *ans = (int *)calloc(queriesSize,sizeof(int));
    int evensum = 0,add = 0;
    //先求数组A元素的偶数和
    for(int i = 0;i < ASize;i++)
    {
        if(A[i]%2 == 0)
        {
            evensum = evensum + A[i];
        }
    }
    //分类讨论
    for(int i = 0;i < queriesSize;i++)
    {
        //add = val + A[index]
        add = A[queries[i][1]] + queries[i][0];
        //如果相加为偶数，两种情况，都为偶数或都为奇数
        if(add%2 == 0)
        {
            //都为偶数，总和+val，更新ans[i]和A[index]
            if(A[queries[i][1]]%2 == 0)
            {
                evensum = evensum + queries[i][0];
                ans[i] = evensum;
                A[queries[i][1]] = add;
            }
            //都为奇数，总和+add
            else
            {
                evensum = evensum + add;
                ans[i] = evensum;
                A[queries[i][1]] = add;
            }
        }
        //add为奇数，两种情况，A为奇q为偶，或者A偶q奇
        else
        {
            //A偶q奇，总和-A[index],更新ans[i]和A[index]
            if(A[queries[i][1]]%2 == 0)
            {
                evensum = evensum - A[queries[i][1]];
                ans[i] = evensum;
                A[queries[i][1]] = add;
            }
            //A奇q偶，总和不变，更新ans[i]和A[index]
            else
            {
                ans[i] = evensum;
                A[queries[i][1]] = add;
            }
        }
    }
    return ans;

}
